@page
@model Collabrix.Pages.TaskPages.KanbanModel
@{
    ViewData["Title"] = "Kanban";
}
<link rel="stylesheet" href="~/css/kanban.css" />

<div class="page-inner">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="#">Projects</a>
                <!-- Link for the project -->
            </li>
            <li class="breadcrumb-item active"
                aria-current="page">
                @(Model.Project?.ProjectName ?? "Project")
            </li>
        </ol>
    </nav>
    @if (TempData["ErrorOnServer"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorOnServer"]
        </div>
    }
    <div class="row">
        @if (Model.Stages != null)
        {
            @foreach (var stage in Model.Stages)
            {
                <div class="col-md-4">
                    <div class="kanban-column" id="stage-@stage.StageId">
                        <h4>@stage.StageName</h4>

                        @if (Model.Tasks.Any(t => t.ProjectTaskStageId == stage.StageId))
                        {
                            @foreach (var task in Model.Tasks.Where(t => t.ProjectTaskStageId == stage.StageId))
                            {
                                <div class="kanban-task" data-id="@task.TaskId">
                                    @task.TaskName
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted">No tasks in this stage.</div>
                        }
                    </div>
                </div>
            }
        }
        @Html.AntiForgeryToken()
    </div>
</div>
<!-- Modal for task details -->
<div class="modal fade" id="taskDetailsModal" tabindex="-1" aria-labelledby="taskDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskDetailsModalLabel">Task Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Title</label>
                        <input type="text" class="form-control" id="taskTitle" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="taskDescription" rows="3" readonly></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="taskCreatedAt" class="form-label">Created At</label>
                        <input type="text" class="form-control" id="taskCreatedAt" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="taskAssignedTo" class="form-label">Assigned To</label>
                        <input type="text" class="form-control" id="taskAssignedTo" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="taskStage" class="form-label">Stage</label>
                        <input type="text" class="form-control" id="taskStage" readonly>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const tasks = @Html.Raw(Json.Serialize(Model.Tasks));
            const stages = @Html.Raw(Json.Serialize(Model.Stages));
            const users = @Html.Raw(Json.Serialize(Model.Users));

            // Initialize Sortable for each kanban column
            $(".kanban-column").each(function () {
                var column = this;
                Sortable.create(column, {
                    group: "kanban",
                    animation: 150,
                    onEnd: function (evt) {
                        var taskId = $(evt.item).data("id");
                        var oldStageId = $(evt.from).attr("id").replace("stage-", "");
                        var newStageId = $(evt.to).attr("id").replace("stage-", "");

                        if (newStageId !== oldStageId) {
                            $.ajax({
                                type: "POST",
                                url: "/TaskPages/Kanban?handler=UpdateTaskStage",
                                beforeSend: function (xhr) {
                                    xhr.setRequestHeader("XSRF-TOKEN",
                                        $('input:hidden[name="__RequestVerificationToken"]').val());
                                },
                                data: {
                                    taskId: taskId,
                                    newStageId: newStageId
                                },
                                success: function (response) {
                                    if (response.success) {
                                        location.reload();
                                    } else {
                                        console.error("Error updating task:", response.message);
                                    }
                                },
                                error: function (xhr, status, error) {
                                    console.error("Error updating task:", error);
                                }
                            });
                        }
                    }
                });
            });


            // Handle task click to open modal with task details
            $(".kanban-task").on("click", function () {
                var taskId = $(this).data("id");
                var taskDetails = tasks.find(task => task.taskId === taskId);
                var stageDetails = stages.find(stage => stage.stageId === taskDetails.projectTaskStageId);
                var user = users.find(user => user.userId === taskDetails.assignedTo);

                // Populate the modal with task details
                $("#taskTitle").val(taskDetails.taskName);
                $("#taskDescription").val(taskDetails.description);
                $("#taskCreatedAt").val(formatDate(taskDetails.createdAt));
                $("#taskAssignedTo").val(user.fullName);
                $("#taskStage").val(stageDetails.stageName);

                // Show the modal using Bootstrap's modal method
                $("#taskDetailsModal").modal('show');
            });


            function formatDate(dateString) {
                const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
                const date = new Date(dateString);
                return date.toLocaleDateString(undefined, options);
            }

            function refreshKanbanColumns() {
                $(".kanban-column").each(function () {
                    var column = $(this);
                    // Check if there are any tasks in this column
                    if (column.children('.kanban-task').length === 0) {
                        // Remove any existing "No tasks in this stage" message
                        column.find('.text-muted').remove();
                        // Append the message if there are no tasks
                        column.append('<div class="text-center text-muted">No tasks in this stage.</div>');
                    } else {
                        // Remove the message if there are tasks
                        column.find('.text-muted').remove();
                    }
                });
            }
        });

    </script>
}